import os
import app.keyboards as kb
import database.requests as rq
from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.utils.markdown import hbold
from app.keyboards import formats, formats_2
from PIL import Image
from aiogram.types import FSInputFile
import app.fsmContext as FSM


router = Router()

user_format_choice = {}


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSM.FSMContext):
    await message.answer(f"–ü—Ä–∏–≤—ñ—Ç, –≤–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é: ",
                        reply_markup=kb.main)
    await state.set_state(FSM.MenuStates.sub_menu)


@router.message(Command('help'))
async def cmd_help(message: Message):
    await message.reply('–Ø–∫—â–æ —î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø–æ–º—ñ—Ç–∏–ª–∏ —è–∫—ñ—Å—å –±–∞–≥–∏ –≤ –±–æ—Ç—ñ, –ø–∏—à—ñ—Ç—å –≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É: @nazardt')


@router.message(Command('register'))
async def cmd_registration(message: Message):
    if await rq.is_user_in_db(message.from_user.id) is False:
        await rq.set_user(message.from_user.id, message.from_user.first_name)
        await message.reply(text=f'–î—è–∫—É—î–º–æ –∑–∞ —Ä–µ–≥—ñ—Å—Ç—Ä–∞—Ü—ñ—é!')
    else:
        await message.answer('–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ)')


@router.message(Command('convert'))
async def cmd_convertion(message: Message):
    await message.answer(text='–í–∏–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç: ', reply_markup=kb.format_kb)


@router.message(Command('my_stats'))
async def send_user_data(message: Message):
    user_id = message.from_user.id
    user = await rq.get_user(user_id)

    if user:
        response = f"üë§ *–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:* {user.username}\nüéØ *–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó:* {user.count_converts}"
    else:
        response = "‚ùå –î–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

    await message.answer(response, parse_mode="Markdown")


@router.message(F.text == 'üîô –ù–∞–∑–∞–¥')
async def back_to_main(message: Message): # remove state: FSM.FSMContext
    await message.answer('üîπ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', reply_markup=kb.main)


@router.message(F.text.in_(formats) | F.text.in_(formats_2))
async def choose_format(message: Message):
    user_format_choice[message.from_user.id] = message.text.lower()
    await message.answer(f"‚úÖ –§–æ—Ä–º–∞—Ç {hbold(message.text)} –≤–∏–±—Ä–∞–Ω–æ. –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ!",
                        parse_mode="HTML")
    

@router.message(F.photo)
async def handle_photo(message: Message):
    user_id = message.from_user.id

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–±—Ä–∞–≤ —Ñ–æ—Ä–º–∞—Ç
    if user_id not in user_format_choice:
        await message.answer("‚ùå –°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç!", reply_markup=kb.format_kb)
        return

    format_to_convert = user_format_choice[user_id]

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç —ñ –∑–∞–º—ñ–Ω—é—î–º–æ "JPG" –Ω–∞ "JPEG"
    if format_to_convert.lower() == "jpg":
        format_to_convert = "JPEG"
    else:
        format_to_convert = format_to_convert.upper()

    bot = message.bot

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    file_path = file.file_path
    input_path = f"temp_input{user_id}.jpg"
    output_path = f"converted_{user_id}.{format_to_convert}"

    await bot.download_file(file_path, input_path)

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —Ñ–æ—Ç–æ
    img = Image.open(input_path)
    img.convert("RGB").save(output_path, format_to_convert.upper())

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–∞–∑–∞–¥
    converted_photo = FSInputFile(output_path)
    await message.answer_document(converted_photo)

    await rq.counter(tg_id=user_id)

    # –û—á–∏—â–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
    os.remove(input_path)
    os.remove(output_path)
